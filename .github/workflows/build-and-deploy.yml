name: Build and Deploy to AWS

on: [ push, workflow_dispatch ]

env:
  DOTNET_APP_BACKEND_SOLUTION: 'Wsa.Gaas.ApiGateway.sln'
  DOTNET_APP_BACKEND_PROJECT_PATH: './src/Wsa.Gaas.ApiGateway/Wsa.Gaas.ApiGateway.csproj'
  ARTIFACT_NAME: 'Wsa.Gaas.ApiGateway'
  SYSTEMD_SERVICE_NAME: 'lobby-apigateway'
  

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  build:
    name: Build on GitHub
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - name: git checkout
        uses: actions/checkout@v3
      
      # Run dotnet build and test
      - name: dotnet restore, build and test
        run: |
          dotnet restore ${{ env.DOTNET_APP_BACKEND_SOLUTION }}
          dotnet build ${{ env.DOTNET_APP_BACKEND_SOLUTION }} -c Release --no-restore
          dotnet test ${{ env.DOTNET_APP_BACKEND_SOLUTION }} -c Release --no-build --verbosity normal

      # Dump GitHub Context
      - name: Dump GitHub Context
        run: |
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '${{ toJSON(github) }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # Run dotnet publish
      - name: dotnet publish
        if: github.event_name == 'push' && (github.ref_name == 'feature/ci' || github.ref_name == 'main')
        run: |
          dotnet publish ${{ env.DOTNET_APP_BACKEND_PROJECT_PATH }} -c Release -r linux-x64 --no-self-contained -o publish /p:DebugType=None /p:DebugSymbols=false

      # Publish Artifact
      - name: Upload Artifact
        if: github.event_name == 'push' && (github.ref_name == 'feature/ci' || github.ref_name == 'main')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            publish
            docker/Dockerfile

  docker-push:
    name: Docker Push
    runs-on: ubuntu-latest
    needs: build
    environment: production
    if: github.event_name == 'push' && (github.ref_name == 'feature/ci' || github.ref_name == 'main')

    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-session-name: github-runner-build-and-deploy
          aws-region: us-east-1
      
      # Login to Amazon ECR Public
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
          mask-password: true

      # Download Artifact
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: .

      # Docker build & push to AWS ECR Public
      - name: Docker build & push
        run: |
          docker build \
            -t ${{ vars.AWS_ECR_URI }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:latest \
            -t ${{ vars.AWS_ECR_URI }}/${{ vars.AWS_ECR_REPOSITORY_NAME }}:${{ github.sha }} \
            -f docker/Dockerfile \
            ./publish
          docker push ${{ vars.AWS_ECR_URI }}/${{ vars.AWS_ECR_REPOSITORY_NAME }} --all-tags

  deploy:
    name: Deploy to AWS EC2
    needs: docker-push
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'push' && (github.ref_name == 'feature/ci' || github.ref_name == 'main')

    steps:
      # Restart systemd service
      - name: Run Application
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          port: ${{ vars.EC2_PORT }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            uname -a
            whoami
            pwd
            sudo systemctl restart ${{ env.SYSTEMD_SERVICE_NAME }}

  